* server

  emacs server starten

  #+BEGIN_SRC emacs-lisp
  (require 'server)
  (unless (server-running-p) (server-start))
  #+END_SRC
  
* packages

  #+BEGIN_SRC emacs-lisp
  (require 'package)

  (defvar gnu '("gnu" . "https://elpa.gnu.org/packages/"))
  (defvar melpa '("melpa" . "https://melpa.org/packages/"))
  (defvar melpa-stable '("melpa-stable" . "https://stable.melpa.org/packages/"))

  (setq package-archives nil)
  (add-to-list 'package-archives melpa-stable t)
  (add-to-list 'package-archives melpa t)
  (add-to-list 'package-archives gnu t)

  (package-initialize)

  (unless (and (file-exists-p (concat init-dir "elpa/archives/gnu"))
               (file-exists-p (concat init-dir "elpa/archives/melpa"))
               (file-exists-p (concat init-dir "elpa/archives/melpa-stable")))
    (package-refresh-contents))

  (defun package-install-if-not-installed (package)
    (if (not (package-installed-p package))

    (package-install package)))


  #+END_SRC

  [[https://github.com/jwiegley/use-package][use-package]] installieren

  #+BEGIN_SRC emacs-lisp
  (package-install-if-not-installed 'use-package)

  (require 'use-package)
  (setq use-package-compute-statistics t)
  #+END_SRC

* color theme

  lieblingsliste: leuven,, monokai, solarized

  #+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
;;    :disabled
    :ensure t
    :init (load-theme 'solarized-dark t))

  (use-package monokai-theme
    :disabled
    :ensure t
    :init (load-theme 'monokai t))
  #+END_SRC

  

* ivy

[[https://github.com/abo-abo/swiper][Ivy - a generic completion frontend for Emacs, Swiper - isearch with an overview, and more. Oh, Man!]]

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :bind (
      ("C-s" . swiper-isearch)
      ("C-x C-f" . counsel-find-file)
      ("M-x" . counsel-M-x)
      ("C-x b" . ivy-switch-buffer)
    )
    :config
    (setq ivy-use-virtual-buffers t)
    (ivy-mode 1)
    )
#+END_SRC

* evil

  #+BEGIN_SRC emacs-lisp
  (use-package evil 
    :ensure t
;    :init (setq evil-disable-insert-state-binding t)
    :config (progn 
      (evil-mode)
      (setq evil-default-state 'emacs)
))
  #+END_SRC

  evil-commentary https://github.com/linktohack/evil-commentary

  #+BEGIN_SRC emacs-lisp
  (use-package evil-commentary :disabled
    :ensure t)
  #+END_SRC


* tastenbelegung

**  [[https://github.com/justbur/emacs-which-key][which-key - Emacs package that displays available keybindings in popup]]

  #+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :diminish which-key-mode
    :config (which-key-mode))

  #+END_SRC


* verschiedenes

**  zeilen umbrechen

  #+BEGIN_SRC emacs-lisp
  (global-visual-line-mode)

  #+END_SRC


**  keine scrollbalken und keine werkzeugleiste anzeigen
  #+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  #+END_SRC

**  bei nachfragen y/n statt yes/no

  #+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
  #+END_SRC

  #+begin_src emacs-lisp
  (setq visible-bell t)
  #+end_src

* SCM: git, etc.

  [[https://github.com/magit/magit/][It's Magit! A Git porcelain inside Emacs.]]

  #+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :defer)
  #+END_SRC

  [[https://github.com/ryuslash/git-auto-commit-mode/][git-auto-commit-mode - Emacs minor mode to automatically commit (and push) a git repository.]]

  #+BEGIN_SRC emacs-lisp
  (use-package git-auto-commit-mode
    :ensure t
    :config (setq gac-automatically-push-p t))
  #+END_SRC

  [[https://github.com/h/find-file-in-repository/][Emacs: Quickly find files in a git, mercurial or other type of repository]]

  #+BEGIN_SRC emacs-lisp
  (use-package find-file-in-repository
    :disabled
    :config (global-set-key (kbd "C-x f") 'find-file-in-repository))
  #+END_SRC
  

* hervorhebung

  #+BEGIN_SRC emacs-lisp
  (global-hl-line-mode)
  #+END_SRC



* klammern/trenner
  schließende klammer bzw. ausdruck hervorheben
  #+BEGIN_SRC emacs-lisp
  (setq show-paren-style 'mixed)
  (show-paren-mode)
  #+END_SRC

  schliessende klammer automatisch einfügen
  #+BEGIN_SRC emacs-lisp
  (electric-pair-mode 1)
  #+END_SRC

  [[https://github.com/Fuco1/smartparens/][Minor mode for Emacs that deals with parens pairs and tries to be smart about it.]]

  aktivieren für modes, die von prog-mode ableiten

  #+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :config (add-hook 'prog-mode-hook #'smartparens-mode))
  #+END_SRC

  farbliche hervorhebung zugehöriger paare

  [[https://github.com/Fanael/rainbow-delimiters/][Emacs rainbow delimiters mode]]

  #+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

  #+END_SRC


* deft

  [[https://github.com/jrblevin/deft][Deft for Emacs]]

  #+BEGIN_SRC emacs-lisp
  (use-package deft
    :ensure t
    :bind ("<f12>" . deft)
    :commands deft
    :config
      (setq deft-directory "~/org-dateien"
        deft-use-filename-as-title nil
        deft-use-filter-string-for-filename t
	deft-default-extension "org"

        ;; automatisch generierten titel in org-mode-dateien mit #+TITLE: versehen
        deft-org-mode-title-prefix t

        ;; nach title (dateiname) sortieren
        deft-current-sort-method 'title

        ;; auch unterverzeichnisse berücksichtigen
        deft-recursive t

        deft-auto-save-interval 30))

  #+END_SRC



* sonstiges  
  spaceline - [[https://github.com/TheBB/spaceline][Powerline theme from Spacemacs]]
  #+BEGIN_SRC emacs-lisp
  (defun mro-config-spaceline ()
    (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
    (spaceline-spacemacs-theme))

  (use-package spaceline
    :ensure t
    :config (mro-config-spaceline))

  #+END_SRC

  dashboard

  [[https://github.com/emacs-dashboard/emacs-dashboard/][An extensible emacs dashboard]]

  #+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :disabled
    :config 
      (dashboard-setup-startup-hook)
      (setq dashboard-projects-backend 'projectile))
  #+END_SRC


  verfolgung der häufigkeit verwendeter emacs-befehle; anzeige mittels *keyfreq-show*

  #+BEGIN_SRC emacs-lisp
  (use-package keyfreq
    :ensure t
    :config
      (keyfreq-mode 1)
      (keyfreq-autosave-mode 1))
  #+END_SRC

  focus
  #+BEGIN_SRC emacs-lisp
;  (use-package focus
;    :ensure t
;    :config (add-hook 'prog-mode-hook #'focus-mode))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode)
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t)
  #+END_SRC
  

* org-mode

**  [[https://orgmode.org/worg/org-contrib/org-protocol.html][org-protocol.el – Intercept calls from emacsclient to trigger custom actions]] 

  determine list of all org buffers that have a file

  #+BEGIN_SRC emacs-lisp
  (defun currently-visited-org-files ()
    (seq-remove 'null (mapcar (lambda (buffer) (buffer-file-name buffer))
                        (org-buffer-list 'files t))))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
  (require 'org-protocol)

  (setq mro-capture-file "~/org-dateien/capture.org")

  (setq org-capture-templates '(
    ("p" "Protocol" entry (file+headline mro-capture-file "zu verorten")
    "* %^{Title}\nQuelle: %u, %a\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n%?")

    ("s" "sichtliste" entry (file+headline "~/org-dateien/agenda/sichtliste.org" "zu verorten")
      "* %? [[%:link][%:description]]\n%U")

    ("L" "Protocol Link" entry (file+headline mro-capture-file "zu verorten")
    "* %? [[%:link][%:description]]\n  Erfasst: %U")))
    
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
  (defun mro-config-org ()

    (setq
      org-agenda-files '("~/org-dateien/agenda/")

      org-refile-allow-creating-parent-nodes 'confirm
      org-refile-use-outline-path t

      ;; erledigte items nicht in agenda view anzeigen
      org-agenda-skip-scheduled-if-done t

      ;; namen für ziel aus dateiname und überschrift ableiten
      org-refile-use-outline-path 'file

      ;; notwending für abgeleitete namen in zielauswahl
      org-outline-path-complete-in-steps nil

      org-refile-allow-creating-parent-node 'confirm)

    ;; alle überschriften bis level 3 in momentan besuchten org-dateien können ziel sein
    (setq org-refile-targets '((currently-visited-org-files :maxlevel . 3))))

  (use-package org
    :config (mro-config-org))
  #+END_SRC

  [[https://github.com/alphapapa/org-super-agenda][Supercharge your Org daily/weekly agenda by grouping items]]

  #+begin_src emacs-lisp
  ;; TODO
  #+end_src

* zeilennummern

  anzeige von zeilennummern nur in modes, die von ~prog-mode~ erben

  #+begin_src emacs-lisp
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  #+end_src

**  anzeige von zeilennummern in allen puffern

  #+BEGIN_SRC emacs-lisp
;;  (global-display-line-numbers-mode)
  #+END_SRC

** in einigen modes sollen allerdings keine zeilennummern angezeigt werden

   #+BEGIN_SRC emacs-lisp
     ;; (dolist (mode '(org-mode-hook eshell-mode-hook elfeed-search-mode-hook elfeed-show-mode-hook))
     ;;   (add-hook mode (lambda () (display-line-numbers-mode 0))))
   #+END_SRC

* ensure that commands found by shell are also found by emacs

   #+BEGIN_SRC emacs-lisp
   (use-package exec-path-from-shell
     :ensure t
     :if (memq window-system '(mac ns x))
     :config (exec-path-from-shell-initialize))
   #+END_SRC


* helpful

  [[https://github.com/Wilfred/helpful][A better Emacs *help* buffer]]

  #+BEGIN_SRC emacs-lisp
  (use-package helpful
    :ensure t
    :custom
      (counsel-describe-function-function #'helpful-callable)
      (counsel-describe-variable-function #'helpful-variable)
    :bind
      ([remap describe-function] . counsel-describe-function)
      ([remap describe-command] . helpful-command)
      ([remap describe-variable] . counsel-describe-variable)
      ([remap describe-key] . helpful-key))
  #+END_SRC

* mu4e

  #+begin_src emacs-lisp
  (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu/mu4e")
  (setq
    mu4e-get-mail-command "offlineimap"
    mu4e-update-interval 1500    ;; viertelstündlich
  )

  (use-package alert
    :ensure t
    :config (setq alert-default-style 'osx-notifier))

  (require 'mu4e)

  (use-package mu4e-alert
    :ensure t
    :init
      (add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
      (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display))
  #+end_src

* anki

  #+begin_src emacs-lisp
  (use-package anki-editor
    :ensure t)
  #+end_src

* flycheck

  #+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
  #+end_src

* elfeed

**  [[https://github.com/skeeto/elfeed][GitHub - skeeto/elfeed: An Emacs web feeds client]]       :elfeed:rss:feed:

 #+BEGIN_SRC emacs-lisp
 (use-package elfeed
   :ensure t)
 #+END_SRC

**  [[https://github.com/remyhonig/elfeed-org][GitHub - remyhonig/elfeed-org: Configure the Elfeed RSS reader with an Orgmode file]] :elfeed:rss:org_mode:

 #+BEGIN_SRC emacs-lisp
 (use-package elfeed-org
   :ensure t
   :requires elfeed
   :config
     (elfeed-org)
     (setq rmh-elfeed-org-files '("~/.emacs.d/elfeed.org")))
 #+END_SRC



* company

  [[http://company-mode.github.io/][company-mode - Modular in-buffer completion framework for Emacs]]

  #+begin_src emacs-lisp
  (use-package company
    :ensure t
    :hook (prog-mode . company-mode))
  #+end_src

  [[https://github.com/company-mode/company-quickhelp][Documentation popup for Company]]

  #+begin_src emacs-lisp
    (use-package company-quickhelp
      :ensure t
      :config (company-quickhelp-mode))
  #+end_src

* entwicklung

** kotlin

   #+begin_src emacs-lisp
   (use-package kotlin-mode
     :ensure t)
   #+end_src

** LSP mode

   #+begin_src emacs-lisp   
   (use-package lsp-mode
     :ensure t
     :init
       (setq lsp-keymap-prefix "C-c l"
         lsp-clients-kotlin-server-executable "/Volumes/OSXGemeinsam/git-repos/kotlin-language-server/server/build/install/server/bin/kotlin-language-server")
     :hook (
       (kotlin-mode . lsp)
       (lsp-mode . lsp-enable-which-key-integration)
     )
     :commands lsp)

   (use-package lsp-ui
     :ensure t
     :commands lsp-ui-mode)

   (use-package lsp-ivy
     :ensure t
     :commands lsp-ivy-workspace-symbol)
   #+end_src

** language servers

** typescript

   #+begin_src emacs-lisp
   (use-package typescript-mode
     :mode "\\.ts\\'"
     :hook (typescript-mode . lsp-deferred)
     :config
       (setq typescript-indent-level 4))
   #+end_src


* nach dem starten den letzten kontext anzeigen

  #+begin_src emacs-lisp
 (setq initial-buffer-choice "~/org-dateien/kontext.org")
  #+end_src

* terminal, shell

  #+begin_src emacs-lisp
  (use-package vterm
    :ensure t)
  #+end_src

** eshell

   #+begin_src emacs-lisp
   (use-package eshell-git-prompt
     :ensure t
     :config (eshell-git-prompt-use-theme 'powerline))
   #+end_src


* yasnippet

  [[https://github.com/joaotavora/yasnippet/][A template system for Emacs]]

  #+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :diminish yas
    :config
      (yas-reload-all)
      (add-hook 'prog-mode-hook #'yas-minor-mode))
  #+END_SRC

  [[https://github.com/AndreaCrotti/yasnippet-snippets][a collection of yasnippet snippets for many languages]]

  #+begin_src emacs-lisp
    (use-package yasnippet-snippets
      :ensure t)
  #+end_src

* font

  #+begin_src emacs-lisp
  (defvar rlp/prog-buffer-face-height 1.3)

  (defun rlp/prog-buffer-face ()
    (interactive)
    (setq buffer-face-mode-face `(:family "Cascadia Mono" :height ,rlp/prog-buffer-face-height))
    (buffer-face-mode)

    (set-face-attribute 'line-number nil :height rlp/prog-buffer-face-height)
  )

  (add-hook 'prog-mode-hook 'rlp/prog-buffer-face)
  #+end_src

* whitespace visualization

  #+begin_src emacs-lisp
    (add-hook 'prog-mode-hook #'whitespace-mode)
  #+end_src

* general prog-mode configuration

   #+begin_src emacs-lisp
   (defun rlp/configure-prog-mode ()
     "configure prog-mode"

     (setq tab-width 4)
     (setq indent-tabs-mode nil)
   )

   (add-hook 'prog-mode-hook 'rlp/configure-prog-mode)
   #+end_src

* [[https://github.com/Yevgnen/ivy-rich][ivy-rich - More friendly interface for ivy.]]

  #+begin_src emacs-lisp
    (use-package ivy-rich
      :ensure t
      :config (ivy-rich-mode 1))
  #+end_src

* docker

  [[https://github.com/Silex/docker.el][Manage docker from Emacs.]]

  #+begin_src emacs-lisp
    (use-package docker
      :ensure t
      :bind ("C-c d" . docker))
  #+end_src
