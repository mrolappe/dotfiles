* server

  start emacs server if not already running

  #+BEGIN_SRC emacs-lisp
  (require 'server)
  (unless (server-running-p) (server-start))
  #+END_SRC
  
* startup time

  #+begin_src emacs-lisp
    (defun efs/display-startup-time ()
      (message "Emacs loaded in %s with %d garbage collections."
	       (format "%.2f seconds"
		       (float-time (time-subtract after-init-time before-init-time)))
	       gcs-done))

    (add-hook 'emacs-startup-hook #'efs/display-startup-time)
  #+end_src

* font

  set default font for frames

  #+begin_src emacs-lisp
        (set-face-attribute 'default nil :font "Cascadia Code PL" :height 130)
  #+end_src

  #+begin_src emacs-lisp
    (defvar rlp/prog-buffer-face-height 1.3)

    (defun rlp/prog-buffer-face ()
      (interactive)
      (setq buffer-face-mode-face `(:family "Cascadia Mono" :height ,rlp/prog-buffer-face-height))
      (buffer-face-mode)

      (set-face-attribute 'line-number nil :height rlp/prog-buffer-face-height)
    )

    (add-hook 'prog-mode-hook 'rlp/prog-buffer-face)
  #+end_src

* packages

  #+BEGIN_SRC emacs-lisp
  (require 'package)

  (defvar gnu '("gnu" . "https://elpa.gnu.org/packages/"))
  (defvar melpa '("melpa" . "https://melpa.org/packages/"))
  (defvar melpa-stable '("melpa-stable" . "https://stable.melpa.org/packages/"))

  (setq package-archives nil)
  (add-to-list 'package-archives melpa-stable t)
  (add-to-list 'package-archives melpa t)
  (add-to-list 'package-archives gnu t)

;;  (package-initialize)

  (unless (and (file-exists-p (concat init-dir "elpa/archives/gnu"))
               (file-exists-p (concat init-dir "elpa/archives/melpa"))
               (file-exists-p (concat init-dir "elpa/archives/melpa-stable")))
    (package-refresh-contents))

  (defun package-install-if-not-installed (package)
    (if (not (package-installed-p package))
    (package-install package)))


  #+END_SRC

  [[https://github.com/jwiegley/use-package][use-package]] for easy package management; ensure it is installed

  #+BEGIN_SRC emacs-lisp
    (package-install-if-not-installed 'use-package)

    (setq use-package-compute-statistics t)
    (setq use-package-verbose t)

    (require 'use-package)
  #+END_SRC

* color theme

  favorites: leuven, monokai, solarized

  #+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
;;    :disabled
    :ensure t
    :init (load-theme 'solarized-dark t))

  (use-package monokai-theme
    :disabled
    :ensure t
    :init (load-theme 'monokai t))
  #+END_SRC

  #+begin_src emacs-lisp
    (use-package doom-themes
      :ensure t
      :disabled
      :config
;;      (load-theme 'doom-one t)
;;      (doom-themes-org-config)
)
  #+end_src
  

* ivy

[[https://github.com/abo-abo/swiper][Ivy - a generic completion frontend for Emacs, Swiper - isearch with an overview, and more. Oh, Man!]]

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :bind (
      ("C-s" . swiper-isearch)
      ("C-x C-f" . counsel-find-file)
      ("M-x" . counsel-M-x)
      ("C-x b" . ivy-switch-buffer)
    )
    :config
    (setq ivy-use-virtual-buffers t)
    (ivy-mode 1)
    )

  (use-package counsel
    :ensure t
    :config (message "counsel geladen"))
#+END_SRC

* evil

  #+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :commands evil-mode
    :config (setq evil-default-state 'emacs))
  #+END_SRC

  evil-commentary https://github.com/linktohack/evil-commentary

* key bindings

**  [[https://github.com/justbur/emacs-which-key][which-key - Emacs package that displays available keybindings in popup]]

  #+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :defer 3
    :diminish which-key-mode
    :config (which-key-mode))
  #+END_SRC


* miscellaneous

  wrap lines

  #+BEGIN_SRC emacs-lisp
  (global-visual-line-mode)
  #+END_SRC

  do not show scroll bars or toolbar

  #+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  #+END_SRC

  use y/n instead of yes/no when asking

  #+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
  #+END_SRC

  ring bell visually instead of making sound

  #+begin_src emacs-lisp
  (setq visible-bell t)
  #+end_src

  create HTML from buffer; required for fontification when exporting org buffer

  #+begin_src emacs-lisp
    (use-package htmlize
      :ensure t
      :commands org-export-dispatch)
  #+end_src

* SCM: git, etc.

  [[https://github.com/magit/magit/][It's Magit! A Git porcelain inside Emacs.]]

  #+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :commands magit magit-status)
  #+END_SRC

  [[https://github.com/ryuslash/git-auto-commit-mode/][git-auto-commit-mode - Emacs minor mode to automatically commit (and push) a git repository.]]

  #+BEGIN_SRC emacs-lisp
  (use-package git-auto-commit-mode
    :ensure t
    :config (setq gac-automatically-push-p t))
  #+END_SRC

  [[https://github.com/h/find-file-in-repository/][Emacs: Quickly find files in a git, mercurial or other type of repository]]

  #+BEGIN_SRC emacs-lisp
  (use-package find-file-in-repository
    :disabled
    :config (global-set-key (kbd "C-x f") 'find-file-in-repository))
  #+END_SRC
  

* highlighting

  highlight the current line in all buffers

  #+BEGIN_SRC emacs-lisp
  (global-hl-line-mode)
  #+END_SRC

* parentheses, delimiters

  highlight matching parenthesis or expression

  #+BEGIN_SRC emacs-lisp
  (setq show-paren-style 'mixed)
  (show-paren-mode)
  #+END_SRC

  [[https://github.com/Fuco1/smartparens/][Minor mode for Emacs that deals with parens pairs and tries to be smart about it.]]

  activate for modes derived from prog-mode

  #+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :hook (prog-mode . smartparens-mode)
    :config (require 'smartparens-config))
  #+END_SRC


  highlight matching parentheses in same color

  [[https://github.com/Fanael/rainbow-delimiters/][Emacs rainbow delimiters mode]]

  #+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :disabled  ;; for trying out paren-faces
    :ensure t
    :config (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

  #+END_SRC

**  [[https://github.com/tarsius/paren-face][tarsius/paren-face: A face dedicated to lisp parentheses]]

   #+begin_src emacs-lisp
     (use-package paren-face
       :ensure t
       :config (global-paren-face-mode))
   #+end_src
* deft

  [[https://github.com/jrblevin/deft][Deft for Emacs]]

  #+BEGIN_SRC emacs-lisp
  (use-package deft
    :ensure t
    :bind ("<f12>" . deft)
    :commands deft
    :config
      (setq deft-directory "~/org-dateien"
        deft-use-filename-as-title nil
        deft-use-filter-string-for-filename t
	deft-default-extension "org"

        ;; add title prefix to automatically generated title tag
        deft-org-mode-title-prefix t

        ;; sort by title (file name)
        deft-current-sort-method 'title

        ;; consider subdirectories
        deft-recursive t

        deft-auto-save-interval 30))

  #+END_SRC

* sonstiges  
  spaceline - [[https://github.com/TheBB/spaceline][Powerline theme from Spacemacs]]

  #+BEGIN_SRC emacs-lisp
  (defun rlp/config-spaceline ()
    (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
    (spaceline-spacemacs-theme))

  (use-package spaceline
    :ensure t
    :disabled
    :config (rlp/config-spaceline))

  #+END_SRC

  dashboard

  [[https://github.com/emacs-dashboard/emacs-dashboard/][An extensible emacs dashboard]]

  #+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :disabled
    :config
      (dashboard-setup-startup-hook)
      (setq dashboard-projects-backend 'projectile))
  #+END_SRC


  verfolgung der häufigkeit verwendeter emacs-befehle; anzeige mittels *keyfreq-show*

  #+BEGIN_SRC emacs-lisp
  (use-package keyfreq
    :ensure t
    :config
      (keyfreq-mode 1)
      (keyfreq-autosave-mode 1))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode)
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t)
  #+END_SRC
  

* org-mode

  location of org and agenda files

  #+begin_src emacs-lisp
    (setq
     rlp/org-files-dir "~/org-dateien"
     rlp/org-agenda-files-dir (expand-file-name "agenda" rlp/org-files-dir))
  #+end_src

  [[https://github.com/integral-dw/org-bullets][org-bullets mode - Show org-mode bullets as UTF-8 characters]]

  #+begin_src emacs-lisp
    (use-package org-bullets
      :ensure t
      :hook (org-mode . org-bullets-mode))
  #+end_src

  make org-mode links to mp4 files open in VLC

  #+begin_src emacs-lisp
  (add-to-list 'org-file-apps '("mp4" . "vlc %s"))
  #+end_src

**  [[https://orgmode.org/worg/org-contrib/org-protocol.html][org-protocol.el – Intercept calls from emacsclient to trigger custom actions]] 

  determine list of all org buffers that have a file

  #+BEGIN_SRC emacs-lisp
  (defun currently-visited-org-files ()
    (seq-remove 'null (mapcar (lambda (buffer) (buffer-file-name buffer))
                        (org-buffer-list 'files t))))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (require 'org-protocol)

    (setq rlp/capture-file (expand-file-name "capture.org" rlp/org-files-dir))

    (setq org-capture-templates '(
      ("p" "Protocol" entry (file+headline rlp/capture-file "zu verorten")
      "* %^{Title}\nQuelle: %u, %a\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n%?")

      ("s" "sichtliste" entry (file+headline "~/org-dateien/agenda/sichtliste.org" "zu verorten")
	"* %? [[%:link][%:description]]\n%U")

      ("L" "Protocol Link" entry (file+headline rlp/capture-file "zu verorten")
      "* %? [[%:link][%:description]]\n  Erfasst: %U")))

  #+END_SRC

  #+BEGIN_SRC emacs-lisp
  (defun rlp/config-org ()

    (setq
      org-agenda-files `(,rlp/org-agenda-files-dir)

      org-refile-allow-creating-parent-nodes 'confirm
      org-refile-use-outline-path t

      org-agenda-include-diary t

      ;; do not show done items
      org-agenda-skip-scheduled-if-done t

      ;; derive target name from file name and headline
      org-refile-use-outline-path 'file

      ;; necessary for derived names in target path
      org-outline-path-complete-in-steps nil

      org-refile-allow-creating-parent-node 'confirm)

    ;; all headlines up to and including level 3 in currently visited org files can be refile targets
    (setq org-refile-targets '((currently-visited-org-files :maxlevel . 3))))

  (use-package org
    :config (rlp/config-org))
  #+END_SRC

  [[https://github.com/alphapapa/org-super-agenda][Supercharge your Org daily/weekly agenda by grouping items]]


**  [[https://github.com/alphapapa/org-ql][alphapapa/org-ql: An Org-mode query language, including search commands and saved views]]

   #+begin_src emacs-lisp
   (use-package org-ql
     :ensure t)
   #+end_src
* line number

  activate line number display only in modes derived from ~prog-mode~

  #+begin_src emacs-lisp
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  #+end_src

* ensure that commands found by shell are also found by emacs

   #+BEGIN_SRC emacs-lisp
   (use-package exec-path-from-shell
     :ensure t
     :defer 2
     :if (memq window-system '(mac ns x))
     :config (exec-path-from-shell-initialize))
   #+END_SRC


* helpful

  [[https://github.com/Wilfred/helpful][A better Emacs *help* buffer]]

  #+BEGIN_SRC emacs-lisp
  (use-package helpful
    :ensure t
    :custom
      (counsel-describe-function-function #'helpful-callable)
      (counsel-describe-variable-function #'helpful-variable)
    :bind
      ([remap describe-function] . counsel-describe-function)
      ([remap describe-command] . helpful-command)
      ([remap describe-variable] . counsel-describe-variable)
      ([remap describe-key] . helpful-key))
  #+END_SRC

* mail; mu4e

  configure notification display

  #+begin_src emacs-lisp
    (use-package alert
      :ensure t
      :config
      (setq rlp/alert-style
	(pcase system-type
	  ('gnu/linux 'notifications)
	  ('darwin 'osx-notifier)
	))

      (if rlp/alert-style
	  (setq alert-default-style rlp/alert-style))
    )
  #+end_src

  [[https://github.com/lordpretzel/mu4e-views][mu4e-views]] facilitates choosing how to view e-mails, e.g. view as html using an xwidgets window.

 add some bookmarks

   #+begin_src emacs-lisp
   (defun rlp/add-mu4e-bookmarks ()
     (add-to-list 'mu4e-bookmarks
		  '(:name "Kotlin Weekly"
		    :query "from:mailinglist@kotlinweekly.net"
		    :key ?k)))
   #+end_src

  #+begin_src emacs-lisp
    (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")

    (setq
      mu4e-get-mail-command "offlineimap"
      mu4e-update-interval 1500    ;; every quarter hour
    )


    (defun rlp/configure-mu4e ()
    (setq mail-user-agent 'mu4e-user-agent
	  message-send-mail-function 'smtpmail-send-it

	  mu4e-compose-format-flowed t
	  mu4e-use-fancy-chars t

	  user-mail-address "m_rolappe@web.de"
	  smtpmail-default-smtp-server "smtp.web.de"
	  smtpmail-smtp-server "smtp.web.de"
	  smtpmail-smtp-service 587
	  smtpmail-stream-type 'starttls
	  message-kill-buffer-on-exit t)

	  (rlp/add-mu4e-bookmarks))

    (use-package mu4e
      :config (rlp/configure-mu4e))

    ;; support for org links to mails
    (use-package org-mu4e)

    (use-package mu4e-alert
      :ensure t
      :after mu4e
      :init
	(add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
	(add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display))
  #+end_src

  add some shortcuts for easy maildir navigation

  #+begin_src emacs-lisp
    (setq mu4e-maildir-shortcuts
	  '((:maildir "/m_rolappe@web.de/INBOX" :key ?i)
	    (:maildir "/m_rolappe@web.de/Archives" :key ?a)
	    (:maildir "/m_rolappe@web.de/Unbekannt" :key ?u)
	    (:maildir "/m_rolappe@web.de/Junk" :key ?j)
	    (:maildir "/m_rolappe@web.de/Sent" :key ?s)))
  #+end_src

  compose messages in a new frame

  #+begin_src emacs-lisp
    (setq mu4e-compose-in-new-frame t)
  #+end_src

  #+begin_src emacs-lisp
    (use-package mu4e-views
      :ensure t
      :after mu4e
      :bind (
             :map mu4e-headers-mode-map
             ("v" . mu4e-views-mu4e-select-view-msg-method)
             ("M-n" . mu4e-views-cursor-msg-view-window-down)
             ("M-p" . mu4e-views-cursor-msg-view-window-up))
      :config
      (setq mu4e-views-completion-method 'ivy
            mu4e-views-default-view-method "html"
            mu4e-views-next-previous-message-behaviour 'stick-to-current-window)
      (mu4e-views-mu4e-use-view-msg-method "html"))
  #+end_src

* anki

  #+begin_src emacs-lisp
  (use-package anki-editor
    :disabled
    :ensure t)
  #+end_src

* flycheck

  #+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
  #+end_src

* elfeed

**  [[https://github.com/skeeto/elfeed][GitHub - skeeto/elfeed: An Emacs web feeds client]]       :elfeed:rss:feed:

 #+BEGIN_SRC emacs-lisp
 (use-package elfeed
   :commands elfeed
   :ensure t)
 #+END_SRC

**  [[https://github.com/remyhonig/elfeed-org][GitHub - remyhonig/elfeed-org: Configure the Elfeed RSS reader with an Orgmode file]] :elfeed:rss:org_mode:

 #+BEGIN_SRC emacs-lisp
   (use-package elfeed-org
     :ensure t
     :after elfeed
     :config
       (elfeed-org)
       (setq rlp/elfeed-org-file (expand-file-name "elfeed.org" rlp/org-files-dir))
       (setq rmh-elfeed-org-files (list rlp/elfeed-org-file)))
 #+END_SRC



* company

  [[http://company-mode.github.io/][company-mode - Modular in-buffer completion framework for Emacs]]

  #+begin_src emacs-lisp
  (use-package company
    :ensure t
    :hook (prog-mode . company-mode))
  #+end_src

  [[https://github.com/company-mode/company-quickhelp][Documentation popup for Company]]

  #+begin_src emacs-lisp
    (use-package company-quickhelp
      :ensure t
      :after company
      :config (company-quickhelp-mode))
  #+end_src

* development

** general prog-mode configuration

    #+begin_src emacs-lisp
    (defun rlp/configure-prog-mode ()
      "configure prog-mode"

      (setq tab-width 4)
      (setq indent-tabs-mode nil)
    )

    (add-hook 'prog-mode-hook 'rlp/configure-prog-mode)
    #+end_src

** kotlin

   #+begin_src emacs-lisp
   (use-package kotlin-mode
     :disabled
     :ensure t)
   #+end_src

** LSP mode

   #+begin_src emacs-lisp   
   (use-package lsp-mode
     :ensure t
     :init
       (setq lsp-keymap-prefix "C-c l"
         lsp-clients-kotlin-server-executable "/Volumes/OSXGemeinsam/git-repos/kotlin-language-server/server/build/install/server/bin/kotlin-language-server")
     :hook (
       (kotlin-mode . lsp)
       (lsp-mode . lsp-enable-which-key-integration)
     )
     :commands lsp)

   (use-package lsp-ui
     :ensure t
     :commands lsp-ui-mode)

   (use-package lsp-ivy
     :ensure t
     :commands lsp-ivy-workspace-symbol)
   #+end_src

** language servers

** typescript

   #+begin_src emacs-lisp
   (use-package typescript-mode
     :mode "\\.ts\\'"
     :hook (typescript-mode . lsp-deferred)
     :config
       (setq typescript-indent-level 4))
   #+end_src


* show last context after start

  #+begin_src emacs-lisp
 (setq initial-buffer-choice "~/org-dateien/kontext.org")
  #+end_src

* terminal, shell

  #+begin_src emacs-lisp
  (use-package vterm
    :ensure t
    :commands vterm)
  #+end_src

** eshell

   #+begin_src emacs-lisp
   (use-package eshell-git-prompt
     :ensure t
     :commands eshell
     :config (eshell-git-prompt-use-theme 'powerline))
   #+end_src


* yasnippet

  [[https://github.com/joaotavora/yasnippet/][A template system for Emacs]]

  #+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :diminish yas
    :hook (prog-mode . yas-minor-mode))
  #+END_SRC

  [[https://github.com/AndreaCrotti/yasnippet-snippets][a collection of yasnippet snippets for many languages]]

  #+begin_src emacs-lisp
    (use-package yasnippet-snippets
      :defer 2
      :requires yasnippet
      :ensure t
      :config      (yas-reload-all))
  #+end_src


* whitespace visualization

  highlight lines longer than 120 characters

  #+begin_src emacs-lisp
  (setq whitespace-line-column 120)
  #+end_src

  only the part of the line which goes beyond ~whitespace-line-column~ is highlighted

  #+begin_src emacs-lisp
  (setq whitespace-style '(
    face
    trailing
    tabs
    spaces
    lines-tail
    empty
    space-before-tab
    space-after-tab))
  #+end_src
  activate for prog-mode derived buffers

  #+begin_src emacs-lisp
    (add-hook 'prog-mode-hook #'whitespace-mode)
  #+end_src

* [[https://github.com/Yevgnen/ivy-rich][ivy-rich - More friendly interface for ivy.]]

  #+begin_src emacs-lisp
    (use-package ivy-rich
      :after ivy
      :hook (ivy-mode . ivy-rich-mode)
      :ensure t
      :config (ivy-rich-mode 1))
  #+end_src

* docker

  [[https://github.com/Silex/docker.el][Manage docker from Emacs.]]

  #+begin_src emacs-lisp
    (use-package docker
      :ensure t
      :bind ("C-c d" . docker))
  #+end_src

* haskell

  [[https://github.com/haskell/haskell-mode][Emacs mode for Haskell]]

  #+begin_src emacs-lisp
    (use-package haskell-mode
      :ensure t
      :mode "\\.h[is]\\'")
  #+end_src

* firefox

  [[https://github.com/cireu/counsel-ffdata][counsel-ffdata - Use ivy interface to access your firefox bookmarks and history in Emacs]]

  #+begin_src emacs-lisp
    (use-package counsel-ffdata
      :ensure t
      :commands (counsel-ffdata-firefox-history counsel-ffdata-firefox-bookmarks))
  #+end_src

* pocket

  [[https://github.com/alphapapa/pocket-reader.el][Emacs client for Pocket reading list (getpocket.com)]]

  #+begin_src emacs-lisp
  (use-package pocket-reader
    :ensure t
    :commands pocket-reader)
  #+end_src

* rust

**  [[https://github.com/brotzeit/rustic][GitHub - brotzeit/rustic: Rust development environment for Emacs]]

   #+begin_src emacs-lisp
     (use-package rustic
       :ensure t
       :commands rustic-mode)
   #+end_src

* ace-window

  [[https://github.com/abo-abo/ace-window][ace-window - Quickly switch windows in Emacs]]

  #+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :bind ("M-o" . ace-window))
  #+end_src

* all-the-icons

**  [[https://github.com/domtronn/all-the-icons.el][GitHub - domtronn/all-the-icons.el: A utility package to collect various Icon Fonts and propertize them within Emacs.]]

   fonts must have been installed via M-x all-the-icons-install-fonts

   #+begin_src emacs-lisp
   (use-package all-the-icons
     :ensure t)
   #+end_src

**  [[https://github.com/jtbm37/all-the-icons-dired][GitHub - jtbm37/all-the-icons-dired: Adds dired support to all-the-icons]]

   #+begin_src emacs-lisp
   (use-package all-the-icons-dired
     :ensure t
     :requires all-the-icons
     :hook (dired-mode . all-the-icons-dired-mode)
   )
   #+end_src

* restclient

**  [[https://github.com/pashky/restclient.el][GitHub - pashky/restclient.el: HTTP REST client tool for emacs]]

   #+begin_src emacs-lisp
   (use-package restclient
     :ensure t
     :commands restclient-mode)
   #+end_src

* engine

*  [[https://github.com/hrs/engine-mode][GitHub - hrs/engine-mode: Minor mode for defining and querying search engines through Emacs.]]

  #+begin_src emacs-lisp
    (use-package engine-mode
      :ensure t
      :config
      (engine-mode t)

      (defengine duckduckgo
	"https://duckduckgo.com/?q=%s"
	:keybinding "d")


      (defengine github
	"https://github.com/search?ref=simplesearch&q=%s")

      (defengine stack-overflow
	"https://stackoverflow.com/search?q=%s")

      (defengine youtube
	"http://www.youtube.com/results?aq=f&oq=&search_query=%s")
      )
  #+end_src

*  [[https://github.com/abo-abo/lispy][GitHub - abo-abo/lispy: Short and sweet LISP editing]]

  #+begin_src emacs-lisp
    (use-package lispy
      :ensure t
      :hook (emacs-lisp-mode . (lambda () (lispy-mode 1))))
  #+end_src

* emms

  #+begin_src emacs-lisp
    (use-package emms
      :ensure t
      :commands emms
      :config
      (emms-all)
      (emms-default-players))
  #+end_src

* erc

  #+begin_src emacs-lisp
    (use-package circe
      :ensure t
      :commands circe)
  #+end_src

* push org file changes

  #+begin_src emacs-lisp
    (add-to-list 'kill-emacs-query-functions
		 (lambda ()
		   (interactive)
		   (yes-or-no-p "push org file changes?")
		   t))
  #+end_src

* epub

**  [[https://depp.brause.cc/nov.el/][nov.el: Major mode for reading EPUBs in Emacs]]

   #+begin_src emacs-lisp
     (use-package nov
       :ensure t
       :mode ("\\.epub\\'" . nov-mode)
       :config
         (defun my-nov-font-setup ()
           (face-remap-add-relative 'variable-pitch :family "DejaVu" :height 1.3))

         (add-hook 'nov-mode-hook 'my-nov-font-setup))
   #+end_src

* blog, hugo

  org mode export to hugo

  #+begin_src emacs-lisp
    (use-package ox-hugo
      :ensure t
      :requires org
      :commands org-export-dispatch)
  #+end_src

* scheme, guile, geiser

  #+begin_src emacs-lisp
    (use-package geiser
      :ensure t
      :commands run-geiser)
  #+end_src


* programming language modes

** lua

   #+begin_src emacs-lisp
     (use-package lua-mode
       :ensure t
       :mode "\\.lua\\'")
   #+end_src

** factor

   #+begin_src emacs-lisp
   (use-package fuel
       :ensure t
       :disabled)
   #+end_src

** forth

***  [[https://github.com/larsbrinkhoff/forth-mode][larsbrinkhoff/forth-mode: Wants to be the SLIME of Forth]]
   
   #+begin_src emacs-lisp
     (use-package forth-mode
       :ensure t
       :mode "\\.fth\\'"
       :commands forth-mode)
   #+end_src

* mode-line

**  [[https://github.com/seagle0128/doom-modeline][seagle0128/doom-modeline: A fancy and fast mode-line inspired by minimalism design.]]

   #+begin_src emacs-lisp
     (use-package doom-modeline
       :ensure t
       :init (doom-modeline-mode 1))
   #+end_src

